openapi: 3.0.0
info:
  title: Argon API
  description: API documentation for Argon server management platform
  version: 1.0.0
  license:
    name: ARGON OPEN SOURCE LICENSE
    url: https://argon.software/license
servers:
  - url: 'http://localhost:3000'
    description: Local development server
  - url: 'https://api.argon.software'
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
    Token:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication
        permissions:
          type: array
          items:
            type: string
          description: List of user permissions
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        permissions:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserCreate:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 8
        permissions:
          type: array
          items:
            type: string
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 8
        permissions:
          type: array
          items:
            type: string
    ProfileUpdate:
      type: object
      properties:
        newUsername:
          type: string
          minLength: 1
        currentPassword:
          type: string
        newPassword:
          type: string
          minLength: 8
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        userId:
          type: string
          format: uuid
        permissions:
          type: array
          items:
            type: string
        lastUsed:
          type: string
          format: date-time
          nullable: true
        expiresAt:
          type: string
          format: date-time
          nullable: true
        keyPreview:
          type: string
          description: Partial key for display purposes
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ApiKeyCreate:
      type: object
      required:
        - name
        - permissions
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        permissions:
          type: array
          items:
            type: string
        expiresAt:
          type: string
          format: date-time
    ApiKeyUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        permissions:
          type: array
          items:
            type: string
        expiresAt:
          type: string
          format: date-time
          nullable: true
    Node:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        fqdn:
          type: string
        port:
          type: integer
        regionId:
          type: string
          format: uuid
          nullable: true
        isOnline:
          type: boolean
        lastChecked:
          type: string
          format: date-time
        allocations:
          type: array
          items:
            $ref: '#/components/schemas/Allocation'
        region:
          $ref: '#/components/schemas/Region'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NodeCreate:
      type: object
      required:
        - name
        - fqdn
        - port
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        fqdn:
          type: string
          pattern: '^(localhost|[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}|(\d{1,3}\.){3}\d{1,3})$'
        port:
          type: integer
          minimum: 1
          maximum: 65535
    NodeUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        fqdn:
          type: string
          pattern: '^(localhost|[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}|(\d{1,3}\.){3}\d{1,3})$'
        port:
          type: integer
          minimum: 1
          maximum: 65535
    NodeRegionUpdate:
      type: object
      properties:
        regionId:
          type: string
          format: uuid
          nullable: true
    Allocation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        nodeId:
          type: string
          format: uuid
        bindAddress:
          type: string
        port:
          type: integer
        alias:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        assigned:
          type: boolean
        serverId:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AllocationCreate:
      type: object
      required:
        - bindAddress
        - port
      properties:
        bindAddress:
          type: string
        port:
          type: integer
          minimum: 1
          maximum: 65535
        alias:
          type: string
        notes:
          type: string
    AllocationRangeCreate:
      type: object
      required:
        - bindAddress
        - portRange
      properties:
        bindAddress:
          type: string
        portRange:
          type: object
          required:
            - start
            - end
          properties:
            start:
              type: integer
              minimum: 1
              maximum: 65535
            end:
              type: integer
              minimum: 1
              maximum: 65535
        alias:
          type: string
        notes:
          type: string
    Region:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        identifier:
          type: string
        countryId:
          type: string
          nullable: true
        fallbackRegionId:
          type: string
          format: uuid
          nullable: true
        serverLimit:
          type: integer
          nullable: true
        stats:
          type: object
          properties:
            serverCount:
              type: integer
            nodeCount:
              type: integer
            onlineNodeCount:
              type: integer
            atCapacity:
              type: boolean
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    RegionCreate:
      type: object
      required:
        - name
        - identifier
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        identifier:
          type: string
          pattern: '^[a-z0-9-]+$'
          minLength: 2
          maxLength: 20
        countryId:
          type: string
          maxLength: 2
        fallbackRegionId:
          type: string
          format: uuid
        serverLimit:
          type: integer
          minimum: 1
    RegionUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        identifier:
          type: string
          pattern: '^[a-z0-9-]+$'
          minLength: 2
          maxLength: 20
        countryId:
          type: string
          maxLength: 2
        fallbackRegionId:
          type: string
          format: uuid
        serverLimit:
          type: integer
          minimum: 1
    Unit:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        shortName:
          type: string
        description:
          type: string
        dockerImages:
          type: array
          items:
            type: object
            properties:
              image:
                type: string
              displayName:
                type: string
        defaultDockerImage:
          type: string
        dockerImage:
          type: string
        defaultStartupCommand:
          type: string
        configFiles:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
              content:
                type: string
        environmentVariables:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              defaultValue:
                type: string
              required:
                type: boolean
              userViewable:
                type: boolean
              userEditable:
                type: boolean
              rules:
                type: string
        installScript:
          type: object
          properties:
            dockerImage:
              type: string
            entrypoint:
              type: string
            script:
              type: string
        startup:
          type: object
          properties:
            userEditable:
              type: boolean
            readyRegex:
              type: string
            stopCommand:
              type: string
        features:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              iconPath:
                type: string
              type:
                type: string
                enum: [required, optional]
              uiData:
                type: object
                properties:
                  component:
                    type: string
                  props:
                    type: object
        meta:
          type: object
          properties:
            version:
              type: string
            author:
              type: string
            website:
              type: string
            supportUrl:
              type: string
        recommendedRequirements:
          type: object
          properties:
            memoryMiB:
              type: integer
            diskMiB:
              type: integer
            cpuPercent:
              type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UnitCreate:
      type: object
      required:
        - name
        - shortName
        - description
        - dockerImages
        - defaultDockerImage
        - defaultStartupCommand
        - installScript
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        shortName:
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[a-z0-9-]+$'
        description:
          type: string
        dockerImages:
          type: array
          items:
            type: object
            properties:
              image:
                type: string
              displayName:
                type: string
        defaultDockerImage:
          type: string
        dockerImage:
          type: string
        defaultStartupCommand:
          type: string
        configFiles:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
              content:
                type: string
        environmentVariables:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              defaultValue:
                type: string
              required:
                type: boolean
              userViewable:
                type: boolean
              userEditable:
                type: boolean
              rules:
                type: string
        installScript:
          type: object
          properties:
            dockerImage:
              type: string
            entrypoint:
              type: string
            script:
              type: string
        startup:
          type: object
          properties:
            userEditable:
              type: boolean
            readyRegex:
              type: string
            stopCommand:
              type: string
        features:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              iconPath:
                type: string
              type:
                type: string
                enum: [required, optional]
              uiData:
                type: object
                properties:
                  component:
                    type: string
                  props:
                    type: object
        meta:
          type: object
          properties:
            version:
              type: string
            author:
              type: string
            website:
              type: string
            supportUrl:
              type: string
        recommendedRequirements:
          type: object
          properties:
            memoryMiB:
              type: integer
            diskMiB:
              type: integer
            cpuPercent:
              type: number
    UnitUpdate:
      $ref: '#/components/schemas/UnitCreate'
    UnitFeature:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        iconPath:
          type: string
        type:
          type: string
          enum: [required, optional]
        uiData:
          type: object
          properties:
            component:
              type: string
            props:
              type: object
    UnitMeta:
      type: object
      properties:
        version:
          type: string
        author:
          type: string
        website:
          type: string
        supportUrl:
          type: string
    Server:
      type: object
      properties:
        id:
          type: string
          format: uuid
        internalId:
          type: string
        name:
          type: string
        nodeId:
          type: string
          format: uuid
        unitId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        allocationId:
          type: string
          format: uuid
        memoryMiB:
          type: integer
        diskMiB:
          type: integer
        cpuPercent:
          type: number
        state:
          type: string
        status:
          type: object
          properties:
            state:
              type: string
        node:
          $ref: '#/components/schemas/Node'
        unit:
          $ref: '#/components/schemas/Unit'
        allocation:
          $ref: '#/components/schemas/Allocation'
        user:
          $ref: '#/components/schemas/User'
        validationToken:
          type: string
        projectId:
          type: string
          format: uuid
          nullable: true
        project:
          $ref: '#/components/schemas/Project'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ServerCreate:
      type: object
      required:
        - name
        - unitId
        - memoryMiB
        - diskMiB
        - cpuPercent
        - userId
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        nodeId:
          type: string
          format: uuid
        regionId:
          type: string
          format: uuid
        allocationId:
          type: string
          format: uuid
        memoryMiB:
          type: integer
          minimum: 128
        diskMiB:
          type: integer
          minimum: 1024
        cpuPercent:
          type: number
          minimum: 1
          maximum: 100
        unitId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        dockerImage:
          type: string
        startupCommand:
          type: string
        featureSelections:
          type: object
    ServerUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        memoryMiB:
          type: integer
          minimum: 128
        diskMiB:
          type: integer
          minimum: 1024
        cpuPercent:
          type: number
          minimum: 1
          maximum: 100
        unitId:
          type: string
          format: uuid
        projectId:
          type: string
          format: uuid
        dockerImage:
          type: string
        startupCommand:
          type: string
    DockerImageUpdate:
      type: object
      required:
        - dockerImage
      properties:
        dockerImage:
          type: string
          minLength: 1
    CargoFile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
        targetPath:
          type: string
        properties:
          type: object
          properties:
            hidden:
              type: boolean
            readonly:
              type: boolean
            noDelete:
              type: boolean
            customProperties:
              type: object
    Cargo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        hash:
          type: string
        size:
          type: integer
        mimeType:
          type: string
        type:
          type: string
          enum: [local, remote]
        remoteUrl:
          type: string
        properties:
          type: object
          properties:
            hidden:
              type: boolean
            readonly:
              type: boolean
            noDelete:
              type: boolean
            customProperties:
              type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CargoLocalCreate:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        properties:
          type: object
          properties:
            hidden:
              type: boolean
            readonly:
              type: boolean
            noDelete:
              type: boolean
            customProperties:
              type: object
    CargoRemoteCreate:
      type: object
      required:
        - name
        - description
        - remoteUrl
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        remoteUrl:
          type: string
          format: uri
        properties:
          type: object
          properties:
            hidden:
              type: boolean
            readonly:
              type: boolean
            noDelete:
              type: boolean
            customProperties:
              type: object
    CargoContainer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              cargoId:
                type: string
                format: uuid
              targetPath:
                type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CargoContainerCreate:
      type: object
      required:
        - name
        - description
        - items
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              cargoId:
                type: string
                format: uuid
              targetPath:
                type: string
                minLength: 1
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        userId:
          type: string
          format: uuid
        serverCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProjectCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          nullable: true
security:
  - bearerAuth: []
  - apiKeyAuth: []
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/login:
    post:
      summary: User login
      description: Login with username and password
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/state:
    get:
      summary: Get current authentication state
      description: Returns the current user's authentication status and permissions
      tags:
        - Authentication
      responses:
        '200':
          description: Authentication state
          content:
            application/json:
              schema:
                type: object
                properties:
                  authenticated:
                    type: boolean
                  username:
                    type: string
                  permissions:
                    type: array
                    items:
                      type: string
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/profile:
    put:
      summary: Update user profile
      description: Update current user's username and/or password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                    description: Only returned if username was changed
                  permissions:
                    type: array
                    items:
                      type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users:
    get:
      summary: Get all users
      description: List all users (admin only)
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new user
      description: Create a new user (admin only)
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/{id}:
    get:
      summary: Get user by ID
      description: Get user details by ID (admin only)
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update user
      description: Update user details (admin only)
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete user
      description: Delete a user (admin only)
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/api-keys:
    get:
      summary: Get all API keys
      description: List all API keys for the current user or specified user (admin)
      tags:
        - API Keys
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter API keys by user ID (admin only)
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create API key
      description: Create a new API key
      tags:
        - API Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreate'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiKey'
                  - type: object
                    properties:
                      keyFull:
                        type: string
                        description: The full API key (only shown once)
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/api-keys/{id}:
    get:
      summary: Get API key
      description: Get API key details by ID
      tags:
        - API Keys
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: API key details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update API key
      description: Update API key details
      tags:
        - API Keys
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyUpdate'
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete API key
      description: Delete an API key
      tags:
        - API Keys
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: API key deleted successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/api-keys/{id}/regenerate:
    post:
      summary: Regenerate API key
      description: Regenerate the secret value of an API key
      tags:
        - API Keys
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: API key regenerated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiKey'
                  - type: object
                    properties:
                      keyFull:
                        type: string
                        description: The regenerated API key (only shown once)
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/nodes:
    get:
      summary: Get all nodes
      description: List all server nodes
      tags:
        - Nodes
      responses:
        '200':
          description: List of nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create node
      description: Create a new server node
      tags:
        - Nodes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeCreate'
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/nodes/{id}:
    get:
      summary: Get node
      description: Get node details by ID
      tags:
        - Nodes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Node details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update node
      description: Update node details
      tags:
        - Nodes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeUpdate'
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete node
      description: Delete a server node
      tags:
        - Nodes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Node deleted successfully
        '400':
          description: Cannot delete node with active servers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/nodes/{id}/region:
    patch:
      summary: Set node region
      description: Assign a node to a region
      tags:
        - Nodes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeRegionUpdate'
      responses:
        '200':
          description: Node region updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Node or region not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/nodes/region/{regionId}:
    get:
      summary: Get nodes in region
      description: List all nodes in a specific region
      tags:
        - Nodes
      parameters:
        - name: regionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of nodes in region
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Region not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/nodes/{id}/allocations:
    post:
      summary: Create allocation
      description: Create a new allocation for a node
      tags:
        - Allocations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Node ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AllocationCreate'
                - $ref: '#/components/schemas/AllocationRangeCreate'
      responses:
        '201':
          description: Allocation created successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Allocation'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Allocation'
        '400':
          description: Invalid request or port already allocated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Node not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/nodes/{nodeId}/allocations/{allocationId}:
    delete:
      summary: Delete allocation
      description: Delete an allocation from a node
      tags:
        - Allocations
      parameters:
        - name: nodeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: allocationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Allocation deleted successfully
        '400':
          description: Cannot delete allocation in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Node or allocation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/regions:
    get:
      summary: Get all regions
      description: List all server regions
      tags:
        - Regions
      responses:
        '200':
          description: List of regions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create region
      description: Create a new server region
      tags:
        - Regions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionCreate'
      responses:
        '201':
          description: Region created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '400':
          description: Invalid request or duplicate identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/regions/{id}:
    get:
      summary: Get region
      description: Get region details by ID
      tags:
        - Regions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Region details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '404':
          description: Region not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update region
      description: Update region details
      tags:
        - Regions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionUpdate'
      responses:
        '200':
          description: Region updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '400':
          description: Invalid request or duplicate identifier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Region or fallback region not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete region
      description: Delete a server region
      tags:
        - Regions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Region deleted successfully
        '400':
          description: Cannot delete region with assigned nodes or used as fallback
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Region not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/regions/{id}/allocations:
    get:
      summary: Get region allocations
      description: List all unassigned allocations in a region
      tags:
        - Regions
        - Allocations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of unassigned allocations in the region
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Allocation'
                    - type: object
                      properties:
                        node:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            name:
                              type: string
                            fqdn:
                              type: string
        '404':
          description: Region not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units:
    get:
      summary: Get all units
      description: List all server units (images)
      tags:
        - Units
      responses:
        '200':
          description: List of units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create unit
      description: Create a new server unit
      tags:
        - Units
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitCreate'
      responses:
        '201':
          description: Unit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: Invalid request or duplicate shortname
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units/import:
    post:
      summary: Import unit
      description: Import a unit from a file
      tags:
        - Units
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Unit imported successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: Invalid file or configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units/version:
    get:
      summary: Get unit version
      description: Get the unit system version
      tags:
        - Units
      responses:
        '200':
          description: Unit version
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                    example: argon/unit:v3
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units/{id}:
    get:
      summary: Get unit
      description: Get unit details by ID
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Unit details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update unit
      description: Update unit details
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitUpdate'
      responses:
        '200':
          description: Unit updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '400':
          description: Invalid request or duplicate shortname
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete unit
      description: Delete a server unit
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Unit deleted successfully
        '400':
          description: Cannot delete unit in use by servers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units/{id}/export:
    get:
      summary: Export unit
      description: Export a unit configuration as JSON
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Unit configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitCreate'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/units/{id}/docker-images:
    get:
      summary: Get unit Docker images
      description: Get available Docker images for a unit
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Unit Docker images
          content:
            application/json:
              schema:
                type: object
                properties:
                  dockerImages:
                    type: array
                    items:
                      type: object
                      properties:
                        image:
                          type: string
                        displayName:
                          type: string
                  defaultDockerImage:
                    type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update unit Docker images
      description: Update Docker images for a unit
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - dockerImages
              properties:
                dockerImages:
                  type: array
                  items:
                    type: object
                    properties:
                      image:
                        type: string
                      displayName:
                        type: string
                defaultDockerImage:
                  type: string
      responses:
        '200':
          description: Docker images updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  dockerImages:
                    type: array
                    items:
                      type: object
                      properties:
                        image:
                          type: string
                        displayName:
                          type: string
                  defaultDockerImage:
                    type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units/{id}/features:
    get:
      summary: Get unit features
      description: Get features for a unit
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Unit features
          content:
            application/json:
              schema:
                type: object
                properties:
                  features:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitFeature'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update unit features
      description: Update all features for a unit
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UnitFeature'
      responses:
        '200':
          description: Features updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  features:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitFeature'
        '400':
          description: Invalid request or duplicate feature name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add unit feature
      description: Add a new feature to a unit
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitFeature'
      responses:
        '201':
          description: Feature added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  feature:
                    $ref: '#/components/schemas/UnitFeature'
                  features:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnitFeature'
        '400':
          description: Invalid request or duplicate feature name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units/{id}/features/{featureName}:
    delete:
      summary: Delete unit feature
      description: Delete a feature from a unit
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: featureName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Feature deleted successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit or feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units/{id}/meta:
    get:
      summary: Get unit metadata
      description: Get metadata for a unit
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Unit metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/UnitMeta'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update unit metadata
      description: Update metadata for a unit
      tags:
        - Units
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitMeta'
      responses:
        '200':
          description: Metadata updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: '#/components/schemas/UnitMeta'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units/{id}/containers:
    get:
      summary: Get unit containers
      description: Get cargo containers assigned to a unit
      tags:
        - Units
        - Cargo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of cargo containers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CargoContainer'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/units/{unitId}/containers/{containerId}:
    post:
      summary: Assign container
      description: Assign a cargo container to a unit
      tags:
        - Units
        - Cargo
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: containerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Container assigned successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit or container not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove container
      description: Remove a cargo container from a unit
      tags:
        - Units
        - Cargo
      parameters:
        - name: unitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: containerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Container removed successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Unit or container not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers:
    get:
      summary: Get all servers
      description: List all servers (or user's servers for non-admin)
      tags:
        - Servers
      responses:
        '200':
          description: List of servers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create server
      description: Create a new server
      tags:
        - Servers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerCreate'
      responses:
        '201':
          description: Server created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          description: Invalid request or no available nodes/allocations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Node, unit, or allocation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers/{id}:
    get:
      summary: Get server
      description: Get server details by ID
      tags:
        - Servers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Server details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update server
      description: Update server details
      tags:
        - Servers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerUpdate'
      responses:
        '200':
          description: Server updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete server
      description: Delete a server
      tags:
        - Servers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Server deleted successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers/{id}/power/{action}:
    post:
      summary: Send power action
      description: Send a power command to the server (start, stop, restart)
      tags:
        - Servers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: action
          in: path
          required: true
          schema:
            type: string
            enum: [start, stop, restart]
      responses:
        '204':
          description: Power action sent successfully
        '400':
          description: Invalid action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers/{id}/reinstall:
    post:
      summary: Reinstall server
      description: Reinstall the server
      tags:
        - Servers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Reinstall initiated successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers/{id}/docker-image:
    patch:
      summary: Update server Docker image
      description: Change the Docker image used by the server
      tags:
        - Servers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DockerImageUpdate'
      responses:
        '200':
          description: Docker image updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  dockerImage:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid request or image not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers/{id}/docker-images:
    get:
      summary: Get server Docker images
      description: Get available Docker images for a server
      tags:
        - Servers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Available Docker images
          content:
            application/json:
              schema:
                type: object
                properties:
                  availableImages:
                    type: array
                    items:
                      type: object
                      properties:
                        image:
                          type: string
                        displayName:
                          type: string
                  currentImage:
                    type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers/{id}/cargo/ship:
    post:
      summary: Ship cargo to server
      description: Ship cargo files to the server
      tags:
        - Servers
        - Cargo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Cargo shipped successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers/{serverId}/cargo-files:
    get:
      summary: Get server cargo files
      description: Get all cargo files associated with a server
      tags:
        - Servers
        - Cargo
      parameters:
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          schema:
            type: string
          description: Optional validation token for daemon requests
      responses:
        '200':
          description: Server cargo files
          content:
            application/json:
              schema:
                type: object
                properties:
                  cargoFiles:
                    type: array
                    items:
                      $ref: '#/components/schemas/CargoFile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers/{internalId}/config:
    get:
      summary: Get server configuration
      description: Get server configuration for daemon
      tags:
        - Servers
      parameters:
        - name: internalId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Server configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  dockerImage:
                    type: string
                  availableImages:
                    type: array
                    items:
                      type: object
                      properties:
                        image:
                          type: string
                        displayName:
                          type: string
                  variables:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        defaultValue:
                          type: string
                        rules:
                          type: string
                  startupCommand:
                    type: string
                  configFiles:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        content:
                          type: string
                  install:
                    type: object
                    properties:
                      dockerImage:
                        type: string
                      entrypoint:
                        type: string
                      script:
                        type: string
                  cargo:
                    type: array
                    items:
                      $ref: '#/components/schemas/CargoFile'
                  serverControl:
                    type: object
                    properties:
                      readyRegex:
                        type: string
                      stopCommand:
                        type: string
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/servers/{internalId}/validate/{token}:
    get:
      summary: Validate server
      description: Validate server with token for daemon
      tags:
        - Servers
      parameters:
        - name: internalId
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Validation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  validated:
                    type: boolean
                  server:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      internalId:
                        type: string
                      node:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          name:
                            type: string
                          fqdn:
                            type: string
                          port:
                            type: integer
        '403':
          description: Invalid validation token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cargo:
    get:
      summary: Get all cargo
      description: List all cargo items
      tags:
        - Cargo
      responses:
        '200':
          description: List of cargo items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cargo'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cargo/upload:
    post:
      summary: Upload cargo
      description: Upload a file as cargo
      tags:
        - Cargo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                data:
                  type: string
                  description: JSON string of cargo properties
      responses:
        '201':
          description: Cargo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cargo'
        '400':
          description: Invalid request or file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cargo/remote:
    post:
      summary: Add remote cargo
      description: Add a remote URL as cargo
      tags:
        - Cargo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CargoRemoteCreate'
      responses:
        '201':
          description: Remote cargo added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cargo'
        '400':
          description: Invalid request or URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cargo/container:
    get:
      summary: Get all containers
      description: List all cargo containers
      tags:
        - Cargo
      responses:
        '200':
          description: List of cargo containers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CargoContainer'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cargo/{id}:
    get:
      summary: Get cargo
      description: Get cargo details by ID
      tags:
        - Cargo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Cargo details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cargo'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cargo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update cargo
      description: Update cargo properties
      tags:
        - Cargo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                description:
                  type: string
                properties:
                  type: object
                  properties:
                    hidden:
                      type: boolean
                    readonly:
                      type: boolean
                    noDelete:
                      type: boolean
                    customProperties:
                      type: object
      responses:
        '200':
          description: Cargo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cargo'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cargo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete cargo
      description: Delete a cargo item
      tags:
        - Cargo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Cargo deleted successfully
        '400':
          description: Cannot delete cargo in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cargo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cargo/{id}/download:
    get:
      summary: Download cargo
      description: Download a cargo file
      tags:
        - Cargo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Cargo file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cargo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cargo/containers:
    post:
      summary: Create container
      description: Create a new cargo container
      tags:
        - Cargo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CargoContainerCreate'
      responses:
        '201':
          description: Container created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoContainer'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cargo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cargo/containers/{id}:
    get:
      summary: Get container
      description: Get container details by ID
      tags:
        - Cargo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Container details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoContainer'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Container not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update container
      description: Update container details
      tags:
        - Cargo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CargoContainerCreate'
      responses:
        '200':
          description: Container updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CargoContainer'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Container or cargo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete container
      description: Delete a cargo container
      tags:
        - Cargo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Container deleted successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Container not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cargo/containers/{containerId}/units/{unitId}:
    post:
      summary: Assign container to unit
      description: Assign a cargo container to a unit
      tags:
        - Cargo
      parameters:
        - name: containerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: unitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Container assigned successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Container or unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove container from unit
      description: Remove a cargo container from a unit
      tags:
        - Cargo
      parameters:
        - name: containerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: unitId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Container removed successfully
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Container or unit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/projects:
    get:
      summary: Get all projects
      description: List all projects for the current user or specified user (admin)
      tags:
        - Projects
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
          description: Filter projects by user ID (admin only)
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create project
      description: Create a new project
      tags:
        - Projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/projects/{id}:
    get:
      summary: Get project
      description: Get project details by ID
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update project
      description: Update project details
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete project
      description: Delete a project
      tags:
        - Projects
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Project deleted successfully
        '400':
          description: Cannot delete default project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/projects/{id}/servers:
    get:
      summary: Get project servers
      description: List all servers in a project
      tags:
        - Projects
        - Servers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of servers in the project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/projects/{projectId}/servers/{serverId}:
    post:
      summary: Move server to project
      description: Move a server to a different project
      tags:
        - Projects
        - Servers
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: serverId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Server moved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Project or server not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/system:
    get:
      summary: Get system info
      description: Get system information
      tags:
        - System
      security: []
      responses:
        '200':
          description: System information
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Argon
                  version:
                    type: string
                    example: 1.0.0
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'